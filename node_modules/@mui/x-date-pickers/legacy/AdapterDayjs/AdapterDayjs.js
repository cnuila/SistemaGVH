import _extends from "@babel/runtime/helpers/esm/extends";
import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
/* eslint-disable class-methods-use-this */
import defaultDayjs from 'dayjs';
import weekOfYear from 'dayjs/plugin/weekOfYear';
import customParseFormatPlugin from 'dayjs/plugin/customParseFormat';
import localizedFormatPlugin from 'dayjs/plugin/localizedFormat';
import isBetweenPlugin from 'dayjs/plugin/isBetween';
import { buildWarning } from '../internals/utils/warning';
defaultDayjs.extend(customParseFormatPlugin);
defaultDayjs.extend(localizedFormatPlugin);
defaultDayjs.extend(isBetweenPlugin);
var localeNotFoundWarning = buildWarning(['Your locale has not been found.', 'Either the locale key is not a supported one. Locales supported by dayjs are available here: https://github.com/iamkun/dayjs/tree/dev/src/locale', "Or you forget to import the locale with `require('dayjs/locale/{localeUsed}')`", 'fallback on English locale']);
var formatTokenMap = {
  // Year
  YY: 'year',
  YYYY: {
    sectionType: 'year',
    contentType: 'digit',
    maxLength: 4
  },
  // Month
  M: {
    sectionType: 'month',
    contentType: 'digit',
    maxLength: 2
  },
  MM: 'month',
  MMM: {
    sectionType: 'month',
    contentType: 'letter'
  },
  MMMM: {
    sectionType: 'month',
    contentType: 'letter'
  },
  // Day of the month
  D: {
    sectionType: 'day',
    contentType: 'digit',
    maxLength: 2
  },
  DD: 'day',
  Do: {
    sectionType: 'day',
    contentType: 'digit-with-letter'
  },
  // Day of the week
  d: {
    sectionType: 'weekDay',
    contentType: 'digit',
    maxLength: 2
  },
  dd: {
    sectionType: 'weekDay',
    contentType: 'letter'
  },
  ddd: {
    sectionType: 'weekDay',
    contentType: 'letter'
  },
  dddd: {
    sectionType: 'weekDay',
    contentType: 'letter'
  },
  // Meridiem
  A: 'meridiem',
  a: 'meridiem',
  // Hours
  H: {
    sectionType: 'hours',
    contentType: 'digit',
    maxLength: 2
  },
  HH: 'hours',
  h: {
    sectionType: 'hours',
    contentType: 'digit',
    maxLength: 2
  },
  hh: 'hours',
  // Minutes
  m: {
    sectionType: 'minutes',
    contentType: 'digit',
    maxLength: 2
  },
  mm: 'minutes',
  // Seconds
  s: {
    sectionType: 'seconds',
    contentType: 'digit',
    maxLength: 2
  },
  ss: 'seconds'
};
var defaultFormats = {
  normalDateWithWeekday: 'ddd, MMM D',
  normalDate: 'D MMMM',
  shortDate: 'MMM D',
  monthAndDate: 'MMMM D',
  dayOfMonth: 'D',
  year: 'YYYY',
  month: 'MMMM',
  monthShort: 'MMM',
  monthAndYear: 'MMMM YYYY',
  weekday: 'dddd',
  weekdayShort: 'ddd',
  minutes: 'mm',
  hours12h: 'hh',
  hours24h: 'HH',
  seconds: 'ss',
  fullTime: 'LT',
  fullTime12h: 'hh:mm A',
  fullTime24h: 'HH:mm',
  fullDate: 'll',
  fullDateWithWeekday: 'dddd, LL',
  fullDateTime: 'lll',
  fullDateTime12h: 'll hh:mm A',
  fullDateTime24h: 'll HH:mm',
  keyboardDate: 'L',
  keyboardDateTime: 'L LT',
  keyboardDateTime12h: 'L hh:mm A',
  keyboardDateTime24h: 'L HH:mm'
};
var withLocale = function withLocale(dayjs, locale) {
  return !locale ? dayjs : function () {
    return dayjs.apply(void 0, arguments).locale(locale);
  };
};

/**
 * Based on `@date-io/dayjs`
 *
 * MIT License
 *
 * Copyright (c) 2017 Dmitriy Kovalenko
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
export var AdapterDayjs = /*#__PURE__*/_createClass(function AdapterDayjs() {
  var _this = this;
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
    _locale = _ref.locale,
    formats = _ref.formats,
    instance = _ref.instance;
  _classCallCheck(this, AdapterDayjs);
  this.isMUIAdapter = true;
  this.lib = 'dayjs';
  this.rawDayJsInstance = void 0;
  this.dayjs = void 0;
  this.locale = void 0;
  this.formats = void 0;
  this.escapedCharacters = {
    start: '[',
    end: ']'
  };
  this.formatTokenMap = formatTokenMap;
  this.getLocaleFormats = function () {
    var _this$rawDayJsInstanc;
    var locales = (_this$rawDayJsInstanc = _this.rawDayJsInstance.Ls) != null ? _this$rawDayJsInstanc : defaultDayjs.Ls;
    var locale = _this.locale || 'en';
    var localeObject = locales[locale];
    if (localeObject === undefined) {
      localeNotFoundWarning();
      localeObject = locales.en;
    }
    return localeObject.formats;
  };
  this.date = function (value) {
    if (value === null) {
      return null;
    }
    return _this.dayjs(value);
  };
  this.toJsDate = function (value) {
    return value.toDate();
  };
  this.parseISO = function (isoString) {
    return _this.dayjs(isoString);
  };
  this.toISO = function (value) {
    return value.toISOString();
  };
  this.parse = function (value, format) {
    if (value === '') {
      return null;
    }
    return _this.dayjs(value, format, _this.locale, true);
  };
  this.getCurrentLocaleCode = function () {
    return _this.locale || 'en';
  };
  this.is12HourCycleInCurrentLocale = function () {
    /* istanbul ignore next */
    return /A|a/.test(_this.getLocaleFormats().LT || '');
  };
  this.expandFormat = function (format) {
    var localeFormats = _this.getLocaleFormats();

    // @see https://github.com/iamkun/dayjs/blob/dev/src/plugin/localizedFormat/index.js
    var t = function t(formatBis) {
      return formatBis.replace(/(\[[^\]]+])|(MMMM|MM|DD|dddd)/g, function (_, a, b) {
        return a || b.slice(1);
      });
    };
    return format.replace(/(\[[^\]]+])|(LTS?|l{1,4}|L{1,4})/g, function (_, a, b) {
      var B = b && b.toUpperCase();
      return a || localeFormats[b] || t(localeFormats[B]);
    });
  };
  this.getFormatHelperText = function (format) {
    return _this.expandFormat(format).replace(/a/gi, '(a|p)m').toLocaleLowerCase();
  };
  this.isNull = function (value) {
    return value === null;
  };
  this.isValid = function (value) {
    return _this.dayjs(value).isValid();
  };
  this.format = function (value, formatKey) {
    return _this.formatByString(value, _this.formats[formatKey]);
  };
  this.formatByString = function (value, formatString) {
    return _this.dayjs(value).format(formatString);
  };
  this.formatNumber = function (numberToFormat) {
    return numberToFormat;
  };
  this.getDiff = function (value, comparing, unit) {
    return value.diff(comparing, unit);
  };
  this.isEqual = function (value, comparing) {
    if (value === null && comparing === null) {
      return true;
    }
    return _this.dayjs(value).isSame(comparing);
  };
  this.isSameYear = function (value, comparing) {
    return value.isSame(comparing, 'year');
  };
  this.isSameMonth = function (value, comparing) {
    return value.isSame(comparing, 'month');
  };
  this.isSameDay = function (value, comparing) {
    return value.isSame(comparing, 'day');
  };
  this.isSameHour = function (value, comparing) {
    return value.isSame(comparing, 'hour');
  };
  this.isAfter = function (value, comparing) {
    return value.isAfter(comparing);
  };
  this.isAfterYear = function (value, comparing) {
    return value.isAfter(comparing, 'year');
  };
  this.isAfterDay = function (value, comparing) {
    return value.isAfter(comparing, 'day');
  };
  this.isBefore = function (value, comparing) {
    return value.isBefore(comparing);
  };
  this.isBeforeYear = function (value, comparing) {
    return value.isBefore(comparing, 'year');
  };
  this.isBeforeDay = function (value, comparing) {
    return value.isBefore(comparing, 'day');
  };
  this.isWithinRange = function (value, _ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
      start = _ref3[0],
      end = _ref3[1];
    return value.isBetween(start, end, null, '[]');
  };
  this.startOfYear = function (value) {
    return value.startOf('year');
  };
  this.startOfMonth = function (value) {
    return value.startOf('month');
  };
  this.startOfWeek = function (value) {
    return value.startOf('week');
  };
  this.startOfDay = function (value) {
    return value.startOf('day');
  };
  this.endOfYear = function (value) {
    return value.endOf('year');
  };
  this.endOfMonth = function (value) {
    return value.endOf('month');
  };
  this.endOfWeek = function (value) {
    return value.endOf('week');
  };
  this.endOfDay = function (value) {
    return value.endOf('day');
  };
  this.addYears = function (value, amount) {
    return amount < 0 ? value.subtract(Math.abs(amount), 'year') : value.add(amount, 'year');
  };
  this.addMonths = function (value, amount) {
    return amount < 0 ? value.subtract(Math.abs(amount), 'month') : value.add(amount, 'month');
  };
  this.addWeeks = function (value, amount) {
    return amount < 0 ? value.subtract(Math.abs(amount), 'week') : value.add(amount, 'week');
  };
  this.addDays = function (value, amount) {
    return amount < 0 ? value.subtract(Math.abs(amount), 'day') : value.add(amount, 'day');
  };
  this.addHours = function (value, amount) {
    return amount < 0 ? value.subtract(Math.abs(amount), 'hour') : value.add(amount, 'hour');
  };
  this.addMinutes = function (value, amount) {
    return amount < 0 ? value.subtract(Math.abs(amount), 'minute') : value.add(amount, 'minute');
  };
  this.addSeconds = function (value, amount) {
    return amount < 0 ? value.subtract(Math.abs(amount), 'second') : value.add(amount, 'second');
  };
  this.getYear = function (value) {
    return value.year();
  };
  this.getMonth = function (value) {
    return value.month();
  };
  this.getDate = function (value) {
    return value.date();
  };
  this.getHours = function (value) {
    return value.hour();
  };
  this.getMinutes = function (value) {
    return value.minute();
  };
  this.getSeconds = function (value) {
    return value.second();
  };
  this.setYear = function (value, year) {
    return value.set('year', year);
  };
  this.setMonth = function (value, month) {
    return value.set('month', month);
  };
  this.setDate = function (value, date) {
    return value.set('date', date);
  };
  this.setHours = function (value, hours) {
    return value.set('hour', hours);
  };
  this.setMinutes = function (value, minutes) {
    return value.set('minute', minutes);
  };
  this.setSeconds = function (value, seconds) {
    return value.set('second', seconds);
  };
  this.getDaysInMonth = function (value) {
    return value.daysInMonth();
  };
  this.getNextMonth = function (value) {
    return value.add(1, 'month');
  };
  this.getPreviousMonth = function (value) {
    return value.subtract(1, 'month');
  };
  this.getMonthArray = function (value) {
    var firstMonth = value.startOf('year');
    var monthArray = [firstMonth];
    while (monthArray.length < 12) {
      var prevMonth = monthArray[monthArray.length - 1];
      monthArray.push(_this.getNextMonth(prevMonth));
    }
    return monthArray;
  };
  this.mergeDateAndTime = function (dateParam, timeParam) {
    return dateParam.hour(timeParam.hour()).minute(timeParam.minute()).second(timeParam.second());
  };
  this.getWeekdays = function () {
    var start = _this.dayjs().startOf('week');
    return [0, 1, 2, 3, 4, 5, 6].map(function (diff) {
      return _this.formatByString(start.add(diff, 'day'), 'dd');
    });
  };
  this.getWeekArray = function (value) {
    var start = value.startOf('month').startOf('week');
    var end = value.endOf('month').endOf('week');
    var count = 0;
    var current = start;
    var nestedWeeks = [];
    while (current.isBefore(end)) {
      var weekNumber = Math.floor(count / 7);
      nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
      nestedWeeks[weekNumber].push(current);
      current = current.add(1, 'day');
      count += 1;
    }
    return nestedWeeks;
  };
  this.getWeekNumber = function (value) {
    return value.week();
  };
  this.getYearRange = function (start, end) {
    var startDate = start.startOf('year');
    var endDate = end.endOf('year');
    var years = [];
    var current = startDate;
    while (current.isBefore(endDate)) {
      years.push(current);
      current = current.add(1, 'year');
    }
    return years;
  };
  this.getMeridiemText = function (ampm) {
    return ampm === 'am' ? 'AM' : 'PM';
  };
  this.rawDayJsInstance = instance || defaultDayjs;
  this.dayjs = withLocale(this.rawDayJsInstance, _locale);
  this.locale = _locale;
  this.formats = _extends({}, defaultFormats, formats);
  defaultDayjs.extend(weekOfYear);
});